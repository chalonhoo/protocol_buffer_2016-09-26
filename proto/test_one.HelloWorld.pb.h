// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_one.HelloWorld.proto

#ifndef PROTOBUF_test_5fone_2eHelloWorld_2eproto__INCLUDED
#define PROTOBUF_test_5fone_2eHelloWorld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test_one {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_5fone_2eHelloWorld_2eproto();
void protobuf_InitDefaults_test_5fone_2eHelloWorld_2eproto();
void protobuf_AssignDesc_test_5fone_2eHelloWorld_2eproto();
void protobuf_ShutdownFile_test_5fone_2eHelloWorld_2eproto();

class HelloWorld;

// ===================================================================

class HelloWorld : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test_one.HelloWorld) */ {
 public:
  HelloWorld();
  virtual ~HelloWorld();

  HelloWorld(const HelloWorld& from);

  inline HelloWorld& operator=(const HelloWorld& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloWorld& default_instance();

  static const HelloWorld* internal_default_instance();

  void Swap(HelloWorld* other);

  // implements Message ----------------------------------------------

  inline HelloWorld* New() const { return New(NULL); }

  HelloWorld* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloWorld& from);
  void MergeFrom(const HelloWorld& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloWorld* other);
  void UnsafeMergeFrom(const HelloWorld& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string str = 2;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // optional int32 opt = 3;
  void clear_opt();
  static const int kOptFieldNumber = 3;
  ::google::protobuf::int32 opt() const;
  void set_opt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test_one.HelloWorld)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 opt_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_test_5fone_2eHelloWorld_2eproto_impl();
  friend void  protobuf_AddDesc_test_5fone_2eHelloWorld_2eproto_impl();
  friend void protobuf_AssignDesc_test_5fone_2eHelloWorld_2eproto();
  friend void protobuf_ShutdownFile_test_5fone_2eHelloWorld_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HelloWorld> HelloWorld_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HelloWorld

// optional int32 id = 1;
inline void HelloWorld::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 HelloWorld::id() const {
  // @@protoc_insertion_point(field_get:test_one.HelloWorld.id)
  return id_;
}
inline void HelloWorld::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:test_one.HelloWorld.id)
}

// optional string str = 2;
inline void HelloWorld::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloWorld::str() const {
  // @@protoc_insertion_point(field_get:test_one.HelloWorld.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloWorld::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test_one.HelloWorld.str)
}
inline void HelloWorld::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test_one.HelloWorld.str)
}
inline void HelloWorld::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test_one.HelloWorld.str)
}
inline ::std::string* HelloWorld::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:test_one.HelloWorld.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloWorld::release_str() {
  // @@protoc_insertion_point(field_release:test_one.HelloWorld.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloWorld::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:test_one.HelloWorld.str)
}

// optional int32 opt = 3;
inline void HelloWorld::clear_opt() {
  opt_ = 0;
}
inline ::google::protobuf::int32 HelloWorld::opt() const {
  // @@protoc_insertion_point(field_get:test_one.HelloWorld.opt)
  return opt_;
}
inline void HelloWorld::set_opt(::google::protobuf::int32 value) {
  
  opt_ = value;
  // @@protoc_insertion_point(field_set:test_one.HelloWorld.opt)
}

inline const HelloWorld* HelloWorld::internal_default_instance() {
  return &HelloWorld_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test_one

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_5fone_2eHelloWorld_2eproto__INCLUDED
